apply plugin: 'application'

sourceCompatibility = 8.0
mainClassName = 'me.rhin.openciv.server.Server'
eclipse.project.name = appName + '-server'
sourceSets.main.resources.srcDirs += [ rootProject.file('server/data').path ]

ext {
	jsonVersion = '20211205'
	log4jVersion = '2.17.1'
	slf4jVersion = '1.7.35'
	webSocketVersion = '1.5.2'
}

dependencies {
	implementation project(':shared')

	api "org.java-websocket:Java-WebSocket:${webSocketVersion}"

	implementation "org.json:json:${jsonVersion}"
	implementation "org.slf4j:slf4j-api:${slf4jVersion}"

	runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
	runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
	runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

run {
	workingDir = rootProject.file('server/data').path
	setIgnoreExitValue(true)
}

jar {
	archiveBaseName.set(appName)
	
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}
